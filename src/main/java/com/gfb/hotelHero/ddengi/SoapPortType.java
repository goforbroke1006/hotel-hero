
package com.gfb.hotelHero.ddengi;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import java.math.BigInteger;


/**
 * 
 *             drebedengi.ru web-service description; In this document term "waste" means expense.
 *         
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "SoapPortType", targetNamespace = "urn:ddengi")
@SOAPBinding(style = SOAPBinding.Style.RPC)
public interface SoapPortType {


    /**
     * 
     *                 Delete all data (transactions, waste category, income source, place list, currency and tags; Used for
     *                 synchronization in case of the conflicts; Returns void if success, or throws SoapFault exception;
     *             
     * 
     * @param pass
     * @param login
     * @param apiId
     */
    @WebMethod(action = "urn:SoapAction")
    public void deleteAll(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass);

    /**
     *
     *                 Delete any object; [id] => ID of the object to delete; [type] => The type of the object, must be one of:
     *                 'waste' 'income' 'move' 'change' 'object' 'currency' 'tag' 'accum'; 'object' is waste category, income
     *                 source or place; If 'id' identifies 'move' or 'change', both records will be deleted on the server;
     *                 Returns 1 on success; if an error accures - generates SoapFault message; if there is other object
     *                 connected to this ID - delete them first;
     *
     *
     * @param pass
     * @param id
     * @param login
     * @param type
     * @param apiId
     * @return
     *     returns java.math.BigInteger
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "deleteObjectReturn", partName = "deleteObjectReturn")
    public BigInteger deleteObject(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "id", partName = "id")
                    BigInteger id,
            @WebParam(name = "type", partName = "type")
                    String type);

    /**
     *
     *                 Get current payment status; Returns 1 if Ok, throw SoapFault otherwise.
     *
     *
     * @param pass
     * @param login
     * @param apiId
     * @return
     *     returns java.math.BigInteger
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getAccessStatusReturn", partName = "getAccessStatusReturn")
    public BigInteger getAccessStatus(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass);

    /**
     *
     *                 Gets list of purchases (accums); For purchase list logic is only needed fields 'id, name, sum_need,
     *                 sum_currency_id, user_id, is_family, created, comment, priority, order_id', other fields is for accum
     *                 logic and should not be changed; ; If parameter [idList] is given, it will be treat as ID list of
     *                 objects to retrieve# this is used for synchronization;
     *
     *
     * @param pass
     * @param idList
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getAccumListReturn", partName = "getAccumListReturn")
    public Object getAccumList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "idList", partName = "idList")
                    Object idList);

    /**
     *
     *                 Retrievs balance list (array of arrays) grouped by places; [params] => array of parameters: 'restDate'
     *                 [YYYY-MM-DD (NOW default)] - rests will be retrieved relative to this value; 'is_with_accum' [true|false
     *                 (default)] - If true, the the accumulation will be subtracted; 'is_with_duty' [true|false (default)] -
     *                 If true, duties will be subtracted;
     *
     *
     * @param pass
     * @param login
     * @param params
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getBalanceReturn", partName = "getBalanceReturn")
    public Object getBalance(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "params", partName = "params")
                    Object params);

    /**
     *
     *                 Retrievs waste category list (array of arrays): [id] => Internal category ID; [parent_id] => For tree
     *                 structure; [budget_family_id] => User family ID (for multiuser mode); [type] => Type of object, 3 -
     *                 waste category; [name] => Category name given by user; [is_hidden] => is category hidden in user
     *                 interface; [sort] => User sort of category tree; If parameter [idList] is given, it will be treat as ID
     *                 list of objects to retrieve# this is used for synchronization;
     *
     *
     * @param pass
     * @param idList
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getCategoryListReturn", partName = "getCategoryListReturn")
    public Object getCategoryList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "idList", partName = "idList")
                    Object idList);

    /**
     *
     *                 Get all changes (array of arrays) from server relative to given revision: [revision] => the revision of
     *                 the change, [action_id] => the action of the change '1' - add, '2' - update, '3' - delete';
     *                 [object_type_id] => type of the object changed '1' - any record (transction), '2' - income source, '3' -
     *                 waste category, '4' - place, '5' - currency, '6' - budget_tags, '7' - budget_accum, '8' -
     *                 budget_accum_order; [object_id] => ID of the object for subsequent calls getRecordList, getCategoryList
     *                 etc; [date] => the date of the change; Parameter [revision] => int8 number, usually saved on the client
     *                 from last successfull sync.
     *
     *
     * @param pass
     * @param login
     * @param apiId
     * @param revision
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getChangeListReturn", partName = "getChangeListReturn")
    public Object getChangeList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "revision", partName = "revision")
                    String revision);

    /**
     *
     *                 Retrievs currency list (array of arrays) with codes and courses: [id] => Internal currency ID; [name] =>
     *                 Currency name, given by user; [course] => current course from sbrf(dot)ru; [code] => International
     *                 currency code (for course autoupdating); [family_id] => User family ID (for multiuser mode);
     *                 [is_default] => is default currency# There should be only one default currency; [is_autoupdate] =>
     *                 autoupdate course once per day, from sbrf(dot)ru; [is_hidden] => is currency hidden in user interface;
     *                 If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for
     *                 synchronization;
     *
     *
     * @param pass
     * @param idList
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getCurrencyListReturn", partName = "getCurrencyListReturn")
    public Object getCurrencyList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "idList", partName = "idList")
                    Object idList);

    /**
     *
     *                 Get current server revision number.
     *
     *
     * @param pass
     * @param login
     * @param apiId
     * @return
     *     returns java.math.BigInteger
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getCurrentRevisionReturn", partName = "getCurrentRevisionReturn")
    public BigInteger getCurrentRevision(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass);

    /**
     *
     *                 Get expire date of active subscription (payed until) for the user - [YYYY-MM-DD]; If there is no active
     *                 subscription return 0; If an error accur return -1;
     *
     *
     * @param pass
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getExpireDateReturn", partName = "getExpireDateReturn")
    public String getExpireDate(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass);

    /**
     *
     *                 Gets list of orders for purchases; If parameter [idList] is given, it will be treat as ID list of
     *                 objects to retrieve# this is used for synchronization;
     *
     *
     * @param pass
     * @param idList
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getOrderListReturn", partName = "getOrderListReturn")
    public Object getOrderList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "idList", partName = "idList")
                    Object idList);

    /**
     *
     *                 Retrievs place list (array of arrays): [id] => Internal place ID; [budget_family_id] => User family ID
     *                 (for multiuser mode); [type] => Type of object, 4 - places; [name] => Place name given by user;
     *                 [is_hidden] => is place hidden in user interface; [is_autohide] => debts will auto hide on null balance;
     *                 [is_for_duty] => Internal place for duty logic, Auto created while user adds "Waste or income duty";
     *                 [sort] => User sort of place list; [purse_of_nuid] => Not empty if place is purse of user# The value is
     *                 internal user ID; [icon_id] => Place icon ID from
     *                 http://www(dot)drebedengi(dot)ru/img/pl[icon_id](dot)gif; If parameter [idList] is given, it will be
     *                 treat as ID list of objects to retrieve# this is used for synchronization; There is may be empty
     *                 response, if user access level is limited;
     *
     *
     * @param pass
     * @param idList
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getPlaceListReturn", partName = "getPlaceListReturn")
    public Object getPlaceList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "idList", partName = "idList")
                    Object idList);

    /**
     *
     *                 Retrievs record list (array of arrays) or report table by parameters; [params] => array of following
     *                 parameters: 'is_report' [true|false (no default)] - retrievs data for report only or full records
     *                 (waste, incomes, moves, changes) for export; 'relative_date' [YYYY-MM-DD (NOW by default)] - all data
     *                 will be retrieved relative to this value, according to 'r_period' value; 'period_to', 'period_from'
     *                 [YYYY-MM-DD] - custom period, if 'r_period' = 0; 'is_show_duty' [true(default)|false] - whether or not
     *                 include duty record; 'r_period' [custom period = 0, this month = 1, today = 7, last month = 2, this
     *                 quart = 3, this year = 4, last year = 5, all time = 6, last 20 record = 8 (default)] - period for which
     *                 data will be obtained; 'r_what' [income = 2, waste = 3 (default), move = 4, change = 5, all types = 6] -
     *                 type of data you want to get; 'r_who' [0 (default) - all users, int8 = user ID] - The data of the user
     *                 to obtain, in the case of multiplayer mode; 'r_how' [show record list by detail = 1 (default), group
     *                 incomes by source = 2, group wastes by category = 3] - Values 2 and 3 are for 'report' mode only# How to
     *                 group the result record list; 'r_middle' [No average = 0 (default), Average monthly = 2592000, Average
     *                 weekly = 604800, Averaged over days = 86400] - How to average the data, if r_how = 2 or 3; 'r_currency'
     *                 [Original currency = 0 (default), int8 = currency ID] - Convert or not in to given currency;
     *                 'r_is_place', 'r_is_tag', 'r_is_category' [Include all = 0 (default), Include only selected = 1, All
     *                 except selected = 2] - Exclude or include 'r_place', 'r_tag' or 'r_category' respectively; 'r_place',
     *                 'r_tag', 'r_category' [Array] - Array of numeric values for place ID, tag ID or category ID
     *                 respectively; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this
     *                 is used for synchronization;
     *
     *
     * @param pass
     * @param idList
     * @param login
     * @param params
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getRecordListReturn", partName = "getRecordListReturn")
    public Object getRecordList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "params", partName = "params")
                    Object params,
            @WebParam(name = "idList", partName = "idList")
                    Object idList);

    /**
     *
     *                 Get user right access for multi user mode; Returns 0 - full access, 1 - limited access; For limited
     *                 access it is neccessary to use getBalance method to display user balance in the application; In this
     *                 case local transactions must simple increment balance, but not compute that as sum of all transactions;
     *
     *
     * @param pass
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getRightAccessReturn", partName = "getRightAccessReturn")
    public String getRightAccess(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass);

    /**
     *
     *                 Internal method; Don't use it;
     *
     *
     * @param url
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getServerSubsReturn", partName = "getServerSubsReturn")
    public Object getServerSubs(
            @WebParam(name = "url", partName = "url")
                    String url);

    /**
     *
     *                 Retrievs income source list (array of arrays): [id] => Internal source ID; [parent_id] => For tree
     *                 structure; [budget_family_id] => User family ID (for multiuser mode); [type] => Type of object, 2 -
     *                 income source; [name] => Source name given by user; [is_hidden] => is income hidden in user interface;
     *                 [sort] => User sort of source tree; If parameter [idList] is given, it will be treat as ID list of
     *                 objects to retrieve# this is used for synchronization;
     *
     *
     * @param pass
     * @param idList
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getSourceListReturn", partName = "getSourceListReturn")
    public Object getSourceList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "idList", partName = "idList")
                    Object idList);

    /**
     *
     *                 Get Premium subscription status; returns 1 - Premium active, 0 - otherwise;
     *
     *
     * @param pass
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getSubscriptionStatusReturn", partName = "getSubscriptionStatusReturn")
    public String getSubscriptionStatus(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass);

    /**
     *
     *                 Retrievs tag list (array of arrays): [id] => Internal tag ID; [family_id] => User family ID (for
     *                 multiuser mode); [name] => Tag name given by user; [is_hidden] => is tag hidden in user interface;
     *                 [is_family] => is tag visible for all family user, or user only; [sort] => User sort of tag list;
     *                 [parent_id] => For tree view; If parameter [idList] is given, it will be treat as ID list of objects to
     *                 retrieve# this is used for synchronization;
     *
     *
     * @param pass
     * @param idList
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getTagListReturn", partName = "getTagListReturn")
    public Object getTagList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "idList", partName = "idList")
                    Object idList);

    /**
     *
     *                 Get internal user ID by login; For multi user mode, this value contained in 'purse_of_nuid' field of the
     *                 current user;
     *
     *
     * @param pass
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "getUserIdByLoginReturn", partName = "getUserIdByLoginReturn")
    public String getUserIdByLogin(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass);

    /**
     *
     *                 Try to parse text data as records; [def..] default field values if no rules detected; [list] => array
     *                 (indexes must be 0,1,2...N) of strings to parse (UTF8); Returns the array of array - data for records;
     *
     *
     * @param defPlaceFromId
     * @param pass
     * @param defSrcId
     * @param defCatId
     * @param login
     * @param list
     * @param apiId
     * @param defPlaceToId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "parseTextDataReturn", partName = "parseTextDataReturn")
    public Object parseTextData(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "defPlaceFromId", partName = "defPlaceFromId")
                    String defPlaceFromId,
            @WebParam(name = "defCatId", partName = "defCatId")
                    String defCatId,
            @WebParam(name = "defSrcId", partName = "defSrcId")
                    String defSrcId,
            @WebParam(name = "defPlaceToId", partName = "defPlaceToId")
                    String defPlaceToId,
            @WebParam(name = "list", partName = "list")
                    Object list);

    /**
     *
     *                 Insert or update accum list; [list] => array of arrays: 'server_id' or 'client_id' [int8] - server or
     *                 client ID of the record# If client ID is present - try to insert new record, and return server2client
     *                 correspondence in the result array# If server_id is present - try to update existing record, @see
     *                 getAccumList description for other detail; Returns the array of server IDs, successfully changed; The
     *                 client MUST save server IDs corresponded to client IDs, for subsequent 'update' and 'delete' calls;
     *
     *
     * @param pass
     * @param login
     * @param list
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "setAccumListReturn", partName = "setAccumListReturn")
    public Object setAccumList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "list", partName = "list")
                    String list);

    /**
     *
     *                 Insert or update waste category list; [list] => array of arrays: 'server_id' or 'client_id' [int8] -
     *                 server or client ID of the record# If client ID is present - try to insert new record, and return
     *                 server2client correspondence in the result array# If server_id is present - try to update existing
     *                 record, @see getCategoryList description for other detail; Returns the array of server IDs, successfully
     *                 changed; The client MUST save server IDs corresponded to client IDs, for subsequent 'update' and
     *                 'delete' calls;
     *
     *
     * @param pass
     * @param login
     * @param list
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "setCategoryListReturn", partName = "setCategoryListReturn")
    public Object setCategoryList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "list", partName = "list")
                    Object list);

    /**
     *
     *                 Insert or update currency list; [list] => array of arrays: 'server_id' or 'client_id' [int8] - server or
     *                 client ID of the record# If client ID is present - try to insert new record, and return server2client
     *                 correspondence in the result array# If server_id is present - try to update existing record, @see
     *                 getCurrencyList description for other detail; Returns the array of server IDs, successfully changed; If
     *                 'is_default' flag set to another currency, then previos updated too and sent in return array; The client
     *                 MUST save server IDs corresponded to client IDs, for subsequent 'update' and 'delete' calls;
     *
     *
     * @param pass
     * @param login
     * @param list
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "setCurrencyListReturn", partName = "setCurrencyListReturn")
    public Object setCurrencyList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "list", partName = "list")
                    Object list);

    /**
     *
     *                 Approve payment from Apple; [transactionReceipt] - is a signed ricept string returned from apple while
     *                 purchasing, this shoud be base64 decoded; [amount] - the sum amount of the purchase, in USD cents;
     *                 Return expire date of the subscription, @see getExpireDate for the description of the return values;
     *
     *
     * @param amount
     * @param transactionReceipt
     * @param pass
     * @param login
     * @param apiId
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "setPaymentTransactionReturn", partName = "setPaymentTransactionReturn")
    public String setPaymentTransaction(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "transactionReceipt", partName = "transactionReceipt")
                    String transactionReceipt,
            @WebParam(name = "amount", partName = "amount")
                    String amount);

    /**
     *
     *                 Insert or update place list; [list] => array of arrays: 'server_id' or 'client_id' [int8] - server or
     *                 client ID of the record# If client ID is present - try to insert new record, and return server2client
     *                 correspondence in the result array# If server_id is present - try to update existing record, @see
     *                 getPlaceList description for other detail; Returns the array of server IDs, successfully changed; The
     *                 client MUST save server IDs corresponded to client IDs, for subsequent 'update' and 'delete' calls;
     *
     *
     * @param pass
     * @param login
     * @param list
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "setPlaceListReturn", partName = "setPlaceListReturn")
    public Object setPlaceList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "list", partName = "list")
                    Object list);

    /**
     *
     *                 Insert or update record list; [list] => array (indexes must be 0,1,2...N) of arrays: 'server_id' or
     *                 'client_id' [int8] - server or client ID of the record# If client ID is present - try to insert new
     *                 record, and return server2client correspondence in the result array# If server_id is present - try to
     *                 update existing record; 'server_move_id' or 'client_move_id' [int8] - for "move" operations only, to
     *                 identify second part of move# The value must point to first part 'server_id' or 'client_id'
     *                 respectively; 'server_change_id' or 'client_change_id' [int8] - for "currency change" operations only,
     *                 to identify second part of change# The value must point to first part 'server_id' or 'client_id'
     *                 respectively; 'place_id' [int8] - place ID, of which the record; 'budget_object_id' [int8] - object ID
     *                 of which the record: category ID for waste, source ID for incomes, place ID for moves and currency
     *                 changes; 'sum' [int8] - absolute value of sum (hundredths); 'operation_date' [YYYY-MM-DD HH:mm:SS] -
     *                 transaction date; 'comment' [UTF8 text] - the comment of the record, 2048 chars max length;
     *                 'currency_id' [int8] - currency ID of the record; 'is_duty' [true|false] - not used; 'operation_type'
     *                 [income = 2, waste = 3 (default), move = 4, change = 5] - transaction type; Returns the array of server
     *                 IDs, successfully changed; The client MUST save server IDs corresponded to client IDs, for subsequent
     *                 'update' and 'delete' calls;
     *
     *
     * @param pass
     * @param login
     * @param list
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "setRecordListReturn", partName = "setRecordListReturn")
    public Object setRecordList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "list", partName = "list")
                    Object list);

    /**
     *
     *                 Insert or update income source list; [list] => array of arrays: 'server_id' or 'client_id' [int8] -
     *                 server or client ID of the record# If client ID is present - try to insert new record, and return
     *                 server2client correspondence in the result array# If server_id is present - try to update existing
     *                 record, @see getSourceList description for other detail; Returns the array of server IDs, successfully
     *                 changed; The client MUST save server IDs corresponded to client IDs, for subsequent 'update' and
     *                 'delete' calls;
     *
     *
     * @param pass
     * @param login
     * @param list
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "setSourceListReturn", partName = "setSourceListReturn")
    public Object setSourceList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "list", partName = "list")
                    Object list);

    /**
     *
     *                 Insert or update tag list; [list] => array of arrays: 'server_id' or 'client_id' [int8] - server or
     *                 client ID of the record# If client ID is present - try to insert new record, and return server2client
     *                 correspondence in the result array# If server_id is present - try to update existing record, @see
     *                 getTagList description for other detail; Returns the array of server IDs, successfully changed; The
     *                 client MUST save server IDs corresponded to client IDs, for subsequent 'update' and 'delete' calls;
     *
     *
     * @param pass
     * @param login
     * @param list
     * @param apiId
     * @return
     *     returns java.lang.Object
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "setTagListReturn", partName = "setTagListReturn")
    public Object setTagList(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "pass", partName = "pass")
                    String pass,
            @WebParam(name = "list", partName = "list")
                    Object list);

    /**
     *
     *                 Reqister new user; Return user password on successfully register; If an error accur return -1 (such
     *                 email already exist), -2 (register not allowed), -3 (email incorrect), -4 (other error); [lang] - 'en'
     *                 or 'ru';
     *
     *
     * @param name
     * @param login
     * @param lang
     * @param apiId
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "urn:SoapAction")
    @WebResult(name = "userRegisterReturn", partName = "userRegisterReturn")
    public String userRegister(
            @WebParam(name = "apiId", partName = "apiId")
                    String apiId,
            @WebParam(name = "login", partName = "login")
                    String login,
            @WebParam(name = "name", partName = "name")
                    String name,
            @WebParam(name = "lang", partName = "lang")
                    String lang);

}
